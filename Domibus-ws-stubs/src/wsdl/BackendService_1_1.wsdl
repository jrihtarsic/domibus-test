<?xml version='1.0' encoding='UTF-8'?>
<wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:tns="http://org.ecodex.backend/1_1/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
                  xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
                  xmlns:ns1="http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/" name="BackendService_1_1"
                  targetNamespace="http://org.ecodex.backend/1_1/">
    <wsdl:types>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    xmlns:tns="http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/"
                    xmlns="http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/"
                    attributeFormDefault="unqualified" elementFormDefault="qualified"
                    targetNamespace="http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/">


            <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>


            <xsd:annotation>
                <xsd:appinfo>
                    <jaxb:globalBindings optionalProperty="primitive">
                        <jaxb:serializable/>
                    </jaxb:globalBindings>
                </xsd:appinfo>
            </xsd:annotation>

            <xsd:annotation>

                <xsd:appinfo>Schema for Domibus messages' headers submission</xsd:appinfo>

                <xsd:documentation xmlns:xml="http://www.w3.org/XML/1998/namespace" xml:lang="en">
                    This schema defines an XML subset of ebMS-3 headers which is used to validate messages submitted to
                    Domibus
                    through WS plugin.
                </xsd:documentation>

            </xsd:annotation>


            <xsd:element name="Messaging" type="Messaging"/>


            <xsd:complexType name="Messaging">

                <xsd:sequence>

                    <xsd:element maxOccurs="1" minOccurs="1" name="UserMessage" type="UserMessage"/>

                </xsd:sequence>

                <xsd:attribute name="mustUnderstand" type="xsd:boolean" use="optional"/>

            </xsd:complexType>


            <xsd:complexType name="UserMessage">

                <xsd:all>

                    <xsd:element maxOccurs="1" minOccurs="0" name="MessageInfo" type="MessageInfo"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="PartyInfo" type="PartyInfo"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="CollaborationInfo" type="CollaborationInfo"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="MessageProperties" type="tns:MessageProperties"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="PayloadInfo" type="tns:PayloadInfo"/>

                </xsd:all>

                <xsd:attribute name="mpc" type="xsd:anyURI" use="optional"/>

            </xsd:complexType>


            <xsd:complexType name="MessageInfo">

                <xsd:all>

                    <xsd:element maxOccurs="1" minOccurs="0" name="Timestamp" type="xsd:dateTime"/>

                    <xsd:element maxOccurs="1" minOccurs="0" name="MessageId" type="tns:max255-non-empty-string"/>

                    <xsd:element maxOccurs="1" minOccurs="0" name="RefToMessageId" type="tns:max255-non-empty-string"/>

                </xsd:all>

            </xsd:complexType>


            <xsd:complexType name="PartyInfo">

                <xsd:all>

                    <xsd:element name="From" type="tns:From"/>

                    <xsd:element name="To" type="tns:To"/>

                </xsd:all>

            </xsd:complexType>


            <xsd:complexType name="PartyId">

                <xsd:simpleContent>

                    <xsd:extension base="tns:max255-non-empty-string">

                        <xsd:attribute name="type" type="tns:max255-non-empty-string" use="required"/>

                    </xsd:extension>

                </xsd:simpleContent>

            </xsd:complexType>


            <xsd:complexType name="From">

                <xsd:all>

                    <xsd:element maxOccurs="1" minOccurs="1" name="PartyId" type="tns:PartyId"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="Role" type="tns:max255-non-empty-string"/>

                </xsd:all>

            </xsd:complexType>


            <xsd:complexType name="To">

                <xsd:all>

                    <xsd:element maxOccurs="1" minOccurs="1" name="PartyId" type="tns:PartyId"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="Role" type="tns:max255-non-empty-string"/>

                </xsd:all>

            </xsd:complexType>


            <xsd:complexType name="CollaborationInfo">

                <xsd:all>

                    <xsd:element minOccurs="0" name="AgreementRef" type="tns:AgreementRef"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="Service" type="tns:Service"/>

                    <xsd:element maxOccurs="1" minOccurs="1" name="Action" type="xsd:token"/>

                    <xsd:element maxOccurs="1" minOccurs="0" name="ConversationId" type="xsd:token"/>

                </xsd:all>

            </xsd:complexType>


            <xsd:complexType name="Service">

                <xsd:simpleContent>

                    <xsd:extension base="tns:max255-non-empty-string">

                        <xsd:attribute name="type" type="tns:max255-non-empty-string" use="required"/>

                    </xsd:extension>

                </xsd:simpleContent>

            </xsd:complexType>


            <xsd:complexType name="AgreementRef">

                <xsd:simpleContent>

                    <xsd:extension base="tns:max255-non-empty-string">

                        <xsd:attribute name="type" type="tns:max255-non-empty-string" use="optional"/>

                        <xsd:attribute name="pmode" type="tns:max255-non-empty-string" use="optional"/>

                    </xsd:extension>

                </xsd:simpleContent>

            </xsd:complexType>


            <xsd:complexType name="PayloadInfo">

                <xsd:sequence>

                    <xsd:element maxOccurs="unbounded" minOccurs="1" name="PartInfo" type="tns:PartInfo"/>

                </xsd:sequence>

            </xsd:complexType>


            <xsd:complexType name="PartInfo">

                <xsd:all>

                    <xsd:element minOccurs="0" name="Schema" type="Schema"/>

                    <xsd:element maxOccurs="1" minOccurs="0" name="Description" type="tns:Description"/>

                    <xsd:element minOccurs="0" name="PartProperties" type="tns:PartProperties"/>

                </xsd:all>

                <xsd:attribute name="href" type="xsd:token" use="required"/>

            </xsd:complexType>


            <xsd:complexType name="Property">

                <xsd:simpleContent>

                    <xsd:extension base="tns:max255-non-empty-string">

                        <xsd:attribute name="name" type="tns:max255-non-empty-string" use="required"/>

                        <xsd:attribute name="type" type="tns:max255-non-empty-string" use="optional"/>

                    </xsd:extension>

                </xsd:simpleContent>

            </xsd:complexType>


            <xsd:complexType name="PartProperties">

                <xsd:sequence>

                    <xsd:element maxOccurs="unbounded" name="Property" type="tns:Property"/>

                </xsd:sequence>

            </xsd:complexType>


            <xsd:complexType name="MessageProperties">

                <xsd:sequence>

                    <xsd:element maxOccurs="unbounded" name="Property" type="Property"/>

                </xsd:sequence>

            </xsd:complexType>


            <xsd:complexType name="Schema">

                <xsd:attribute name="location" type="xsd:anyURI" use="required"/>

                <xsd:attribute name="version" type="tns:max255-non-empty-string" use="optional"/>

                <xsd:attribute name="namespace" type="tns:max255-non-empty-string" use="optional"/>

            </xsd:complexType>


            <xsd:complexType name="Description">

                <xsd:simpleContent>

                    <xsd:extension base="tns:max255-non-empty-string">

                        <xsd:attribute ref="xml:lang" use="required"/>

                    </xsd:extension>

                </xsd:simpleContent>

            </xsd:complexType>


            <xsd:simpleType name="max255-non-empty-string">

                <xsd:restriction base="xsd:string">

                    <xsd:minLength value="1"/>

                    <xsd:maxLength value="255"/>

                </xsd:restriction>

            </xsd:simpleType>


        </xsd:schema>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.w3.org/XML/1998/namespace"
                   xml:lang="en">


            <xs:annotation>

                <xs:documentation>
                    See http://www.w3.org/XML/1998/namespace.html and
                    http://www.w3.org/TR/REC-xml for information about this namespace.

                    This schema document describes the XML namespace, in a form
                    suitable for import by other schema documents.

                    Note that local names in this namespace are intended to be defined
                    only by the World Wide Web Consortium or its subgroups. The
                    following names are currently defined in this namespace and should
                    not be used with conflicting semantics by any Working Group,
                    specification, or document instance:

                    base (as an attribute name): denotes an attribute whose value
                    provides a URI to be used as the base for interpreting any
                    relative URIs in the scope of the element on which it
                    appears; its value is inherited. This name is reserved
                    by virtue of its definition in the XML Base specification.

                    id (as an attribute name): denotes an attribute whose value
                    should be interpreted as if declared to be of type ID.
                    The xml:id specification is not yet a W3C Recommendation,
                    but this attribute is included here to facilitate experimentation
                    with the mechanisms it proposes. Note that it is _not_ included
                    in the specialAttrs attribute group.

                    lang (as an attribute name): denotes an attribute whose value
                    is a language code for the natural language of the content of
                    any element; its value is inherited. This name is reserved
                    by virtue of its definition in the XML specification.

                    space (as an attribute name): denotes an attribute whose
                    value is a keyword indicating what whitespace processing
                    discipline is intended for the content of the element; its
                    value is inherited. This name is reserved by virtue of its
                    definition in the XML specification.

                    Father (in any context at all): denotes Jon Bosak, the chair of
                    the original XML Working Group. This name is reserved by
                    the following decision of the W3C XML Plenary and
                    XML Coordination groups:

                    In appreciation for his vision, leadership and dedication
                    the W3C XML Plenary on this 10th day of February, 2000
                    reserves for Jon Bosak in perpetuity the XML name
                    xml:Father
                </xs:documentation>

            </xs:annotation>


            <xs:annotation>

                <xs:documentation>This schema defines attributes and an attribute group
                    suitable for use by
                    schemas wishing to allow xml:base, xml:lang, xml:space or xml:id
                    attributes on elements they define.

                    To enable this, such a schema must import this schema
                    for the XML namespace, e.g. as follows:
                    &lt;schema . . .>
                    . . .
                    &lt;import namespace="http://www.w3.org/XML/1998/namespace"
                    schemaLocation="http://www.w3.org/2001/xml.xsd"/>

                    Subsequently, qualified reference to any of the attributes
                    or the group defined below will have the desired effect, e.g.

                    &lt;type . . .>
                    . . .
                    &lt;attributeGroup ref="xml:specialAttrs"/>

                    will define a type which will schema-validate an instance
                    element with any of those attributes
                </xs:documentation>

            </xs:annotation>


            <xs:annotation>

                <xs:documentation>In keeping with the XML Schema WG's standard versioning
                    policy, this schema document will persist at
                    http://www.w3.org/2005/08/xml.xsd.
                    At the date of issue it can also be found at
                    http://www.w3.org/2001/xml.xsd.
                    The schema document at that URI may however change in the future,
                    in order to remain compatible with the latest version of XML Schema
                    itself, or with the XML namespace itself. In other words, if the XML
                    Schema or XML namespaces change, the version of this document at
                    http://www.w3.org/2001/xml.xsd will change
                    accordingly; the version at
                    http://www.w3.org/2005/08/xml.xsd will not change.
                </xs:documentation>

            </xs:annotation>


            <xs:attribute name="lang">

                <xs:annotation>

                    <xs:documentation>Attempting to install the relevant ISO 2- and 3-letter
                        codes as the enumerated possible values is probably never
                        going to be a realistic possibility. See
                        RFC 3066 at http://www.ietf.org/rfc/rfc3066.txt and the IANA registry
                        at http://www.iana.org/assignments/lang-tag-apps.htm for
                        further information.

                        The union allows for the 'un-declaration' of xml:lang with
                        the empty string.
                    </xs:documentation>

                </xs:annotation>

                <xs:simpleType>

                    <xs:union memberTypes="xs:language">

                        <xs:simpleType>

                            <xs:restriction base="xs:string">

                                <xs:enumeration value=""/>

                            </xs:restriction>

                        </xs:simpleType>

                    </xs:union>

                </xs:simpleType>

            </xs:attribute>


            <xs:attribute name="space">

                <xs:simpleType>

                    <xs:restriction base="xs:NCName">

                        <xs:enumeration value="default"/>

                        <xs:enumeration value="preserve"/>

                    </xs:restriction>

                </xs:simpleType>

            </xs:attribute>


            <xs:attribute name="base" type="xs:anyURI">

                <xs:annotation>

                    <xs:documentation>See http://www.w3.org/TR/xmlbase/ for
                        information about this attribute.
                    </xs:documentation>

                </xs:annotation>

            </xs:attribute>


            <xs:attribute name="id" type="xs:ID">

                <xs:annotation>

                    <xs:documentation>See http://www.w3.org/TR/xml-id/ for
                        information about this attribute.
                    </xs:documentation>

                </xs:annotation>

            </xs:attribute>


            <xs:attributeGroup name="specialAttrs">

                <xs:attribute ref="xml:base"/>

                <xs:attribute ref="xml:lang"/>

                <xs:attribute ref="xml:space"/>

            </xs:attributeGroup>


        </xs:schema>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://org.ecodex.backend/1_1/"
                   xmlns:ns1="http://www.w3.org/2005/05/xmlmime" attributeFormDefault="unqualified"
                   elementFormDefault="unqualified" targetNamespace="http://org.ecodex.backend/1_1/">


            <xs:import namespace="http://www.w3.org/2005/05/xmlmime"/>


            <xs:simpleType name="max255-non-empty-string">

                <xs:restriction base="xs:string">

                    <xs:minLength value="1"/>

                    <xs:maxLength value="255"/>

                </xs:restriction>

            </xs:simpleType>


            <xs:element name="FaultDetail">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="code" type="xs:string"/>

                        <xs:element name="message" nillable="true" type="xs:string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="downloadMessageRequest">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="messageID" type="tns:max255-non-empty-string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="downloadMessageResponse">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element minOccurs="0" name="bodyload" type="tns:PayloadType"/>

                        <xs:element maxOccurs="unbounded" minOccurs="0" name="payload" nillable="true"
                                    type="tns:PayloadType"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="listPendingMessagesRequest" type="xs:anyType"/>

            <xs:element name="listPendingMessagesResponse">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element maxOccurs="unbounded" minOccurs="0" name="messageID" nillable="true"
                                    type="xs:string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="messageErrorsRequest">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="messageID" type="tns:max255-non-empty-string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="messageStatusRequest">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="messageID" type="tns:max255-non-empty-string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="sendRequest">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element minOccurs="0" name="bodyload" type="tns:PayloadType"/>

                        <xs:element maxOccurs="unbounded" minOccurs="0" name="payload" nillable="true"
                                    type="tns:PayloadType"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="sendRequestURL">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element minOccurs="0" name="bodyload" type="tns:PayloadURLType"/>

                        <xs:element maxOccurs="unbounded" minOccurs="0" name="payload" nillable="true"
                                    type="tns:PayloadURLType"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="sendResponse">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element maxOccurs="unbounded" minOccurs="0" name="messageID" nillable="true"
                                    type="xs:string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:complexType name="PayloadType">

                <xs:simpleContent>

                    <xs:extension base="ns1:base64Binary">

                        <xs:attribute name="payloadId" type="xs:token" use="required"/>

                    </xs:extension>

                </xs:simpleContent>

            </xs:complexType>

            <xs:complexType name="errorResultImpl">

                <xs:sequence>

                    <xs:element minOccurs="0" name="errorCode" type="tns:errorCode"/>

                    <xs:element minOccurs="0" name="errorDetail" type="xs:string"/>

                    <xs:element minOccurs="0" name="messageInErrorId" type="xs:string"/>

                    <xs:element minOccurs="0" name="mshRole" type="tns:mshRole"/>

                    <xs:element minOccurs="0" name="notified" type="xs:dateTime"/>

                    <xs:element minOccurs="0" name="timestamp" type="xs:dateTime"/>

                </xs:sequence>

            </xs:complexType>

            <xs:complexType name="PayloadURLType">

                <xs:simpleContent>

                    <xs:extension base="xs:string">

                        <xs:attribute name="payloadId" type="xs:token" use="required"/>

                    </xs:extension>

                </xs:simpleContent>

            </xs:complexType>

            <xs:simpleType name="messageStatus">

                <xs:restriction base="xs:string">

                    <xs:enumeration value="READY_TO_SEND"/>

                    <xs:enumeration value="SEND_ENQUEUED"/>

                    <xs:enumeration value="SEND_IN_PROGRESS"/>

                    <xs:enumeration value="WAITING_FOR_RECEIPT"/>

                    <xs:enumeration value="ACKNOWLEDGED"/>

                    <xs:enumeration value="ACKNOWLEDGED_WITH_WARNING"/>

                    <xs:enumeration value="SEND_ATTEMPT_FAILED"/>

                    <xs:enumeration value="SEND_FAILURE"/>

                    <xs:enumeration value="NOT_FOUND"/>

                    <xs:enumeration value="WAITING_FOR_RETRY"/>

                    <xs:enumeration value="RECEIVED"/>

                    <xs:enumeration value="RECEIVED_WITH_WARNINGS"/>

                    <xs:enumeration value="DELETED"/>

                </xs:restriction>

            </xs:simpleType>

            <xs:simpleType name="errorCode">

                <xs:restriction base="xs:string">

                    <xs:enumeration value="EBMS_0001"/>

                    <xs:enumeration value="EBMS_0002"/>

                    <xs:enumeration value="EBMS_0003"/>

                    <xs:enumeration value="EBMS_0004"/>

                    <xs:enumeration value="EBMS_0005"/>

                    <xs:enumeration value="EBMS_0006"/>

                    <xs:enumeration value="EBMS_0007"/>

                    <xs:enumeration value="EBMS_0008"/>

                    <xs:enumeration value="EBMS_0009"/>

                    <xs:enumeration value="EBMS_0010"/>

                    <xs:enumeration value="EBMS_0011"/>

                    <xs:enumeration value="EBMS_0101"/>

                    <xs:enumeration value="EBMS_0102"/>

                    <xs:enumeration value="EBMS_0103"/>

                    <xs:enumeration value="EBMS_0201"/>

                    <xs:enumeration value="EBMS_0202"/>

                    <xs:enumeration value="EBMS_0301"/>

                    <xs:enumeration value="EBMS_0302"/>

                    <xs:enumeration value="EBMS_0303"/>

                    <xs:enumeration value="EBMS_0020"/>

                    <xs:enumeration value="EBMS_0021"/>

                    <xs:enumeration value="EBMS_0022"/>

                    <xs:enumeration value="EBMS_0023"/>

                    <xs:enumeration value="EBMS_0030"/>

                    <xs:enumeration value="EBMS_0031"/>

                    <xs:enumeration value="EBMS_0040"/>

                    <xs:enumeration value="EBMS_0041"/>

                    <xs:enumeration value="EBMS_0042"/>

                    <xs:enumeration value="EBMS_0043"/>

                    <xs:enumeration value="EBMS_0044"/>

                    <xs:enumeration value="EBMS_0045"/>

                    <xs:enumeration value="EBMS_0046"/>

                    <xs:enumeration value="EBMS_0047"/>

                    <xs:enumeration value="EBMS_0048"/>

                    <xs:enumeration value="EBMS_0049"/>

                    <xs:enumeration value="EBMS_0050"/>

                    <xs:enumeration value="EBMS_0051"/>

                    <xs:enumeration value="EBMS_0052"/>

                    <xs:enumeration value="EBMS_0053"/>

                    <xs:enumeration value="EBMS_0054"/>

                    <xs:enumeration value="EBMS_0055"/>

                    <xs:enumeration value="EBMS_0060"/>

                    <xs:enumeration value="EBMS_0065"/>

                </xs:restriction>

            </xs:simpleType>

            <xs:simpleType name="mshRole">

                <xs:restriction base="xs:string">

                    <xs:enumeration value="SENDING"/>

                    <xs:enumeration value="RECEIVING"/>

                </xs:restriction>

            </xs:simpleType>

            <xs:complexType final="#all" name="errorResultImplArray">

                <xs:sequence>

                    <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true"
                                type="tns:errorResultImpl"/>

                </xs:sequence>

            </xs:complexType>

            <xs:element name="getStatusRequest" nillable="true">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="messageID" type="tns:max255-non-empty-string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="getMessageStatusResponse" nillable="true" type="tns:messageStatus"/>

            <xs:element name="getErrorsRequest" nillable="true">

                <xs:complexType>

                    <xs:sequence>

                        <xs:element name="messageID" type="tns:max255-non-empty-string"/>

                    </xs:sequence>

                </xs:complexType>

            </xs:element>

            <xs:element name="getMessageErrorsResponse" nillable="true" type="tns:errorResultImplArray"/>

        </xs:schema>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xmime="http://www.w3.org/2005/05/xmlmime"
                   targetNamespace="http://www.w3.org/2005/05/xmlmime">


            <xs:attribute name="contentType">

                <xs:simpleType>

                    <xs:restriction base="xs:string">

                        <xs:minLength value="3"/>

                    </xs:restriction>

                </xs:simpleType>

            </xs:attribute>


            <xs:attribute name="expectedContentTypes" type="xs:string"/>


            <xs:complexType name="base64Binary">

                <xs:simpleContent>

                    <xs:extension base="xs:base64Binary">

                        <xs:attribute ref="xmime:contentType"/>

                    </xs:extension>

                </xs:simpleContent>

            </xs:complexType>


            <xs:complexType name="hexBinary">

                <xs:simpleContent>

                    <xs:extension base="xs:hexBinary">

                        <xs:attribute ref="xmime:contentType"/>

                    </xs:extension>

                </xs:simpleContent>

            </xs:complexType>


        </xs:schema>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"
                   elementFormDefault="qualified" targetNamespace="http://www.w3.org/2003/05/soap-envelope"
                   version="1.0">


            <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>


            <xs:element name="Body" type="tns:Body"/>


            <xs:element name="Envelope" type="tns:Envelope"/>


            <xs:element name="Fault" type="tns:Fault"/>


            <xs:element name="Header" type="tns:Header"/>


            <xs:element name="NotUnderstood" type="tns:NotUnderstoodType"/>


            <xs:element name="Upgrade" type="tns:UpgradeType"/>


            <xs:complexType name="Fault">

                <xs:sequence>

                    <xs:element name="Code" type="tns:faultcode"/>

                    <xs:element name="Reason" type="tns:faultreason"/>

                    <xs:element minOccurs="0" name="Node" type="xs:anyURI"/>

                    <xs:element minOccurs="0" name="Role" type="xs:anyURI"/>

                    <xs:element minOccurs="0" name="Detail" type="tns:detail"/>

                </xs:sequence>

            </xs:complexType>


            <xs:complexType name="faultcode">

                <xs:sequence>

                    <xs:element name="Value" type="xs:QName"/>

                    <xs:element minOccurs="0" name="Subcode" type="tns:subcode"/>

                </xs:sequence>

            </xs:complexType>


            <xs:complexType name="subcode">

                <xs:sequence>

                    <xs:element name="Value" type="xs:QName"/>

                    <xs:element minOccurs="0" name="Subcode" type="tns:subcode"/>

                </xs:sequence>

            </xs:complexType>


            <xs:complexType name="faultreason">

                <xs:sequence>

                    <xs:element maxOccurs="unbounded" name="Text" type="tns:reasontext"/>

                </xs:sequence>

            </xs:complexType>


            <xs:complexType name="reasontext">

                <xs:simpleContent>

                    <xs:extension base="xs:string">

                        <xs:attribute ref="xml:lang" use="required"/>

                    </xs:extension>

                </xs:simpleContent>

            </xs:complexType>


            <xs:complexType name="detail">

                <xs:sequence>

                    <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>

                </xs:sequence>

                <xs:anyAttribute namespace="##other" processContents="skip"/>

            </xs:complexType>


            <xs:complexType name="Envelope">

                <xs:sequence>

                    <xs:element minOccurs="0" name="Header" type="tns:Header"/>

                    <xs:element name="Body" type="tns:Body"/>

                </xs:sequence>

                <xs:anyAttribute namespace="##other" processContents="skip"/>

            </xs:complexType>


            <xs:complexType name="Header">

                <xs:sequence>

                    <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>

                </xs:sequence>

                <xs:anyAttribute namespace="##other" processContents="skip"/>

            </xs:complexType>


            <xs:complexType name="Body">

                <xs:sequence>

                    <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>

                </xs:sequence>

                <xs:anyAttribute namespace="##other" processContents="skip"/>

            </xs:complexType>


            <xs:complexType name="NotUnderstoodType">

                <xs:sequence/>

                <xs:attribute name="qname" type="xs:QName" use="required"/>

            </xs:complexType>


            <xs:complexType name="UpgradeType">

                <xs:sequence>

                    <xs:element maxOccurs="unbounded" name="SupportedEnvelope" type="tns:SupportedEnvType"/>

                </xs:sequence>

            </xs:complexType>


            <xs:complexType name="SupportedEnvType">

                <xs:sequence/>

                <xs:attribute name="qname" type="xs:QName" use="required"/>

            </xs:complexType>


            <xs:attribute name="mustUnderstand" type="xs:boolean"/>


        </xs:schema>
    </wsdl:types>
    <wsdl:message name="getMessageErrors">
        <wsdl:part element="tns:getErrorsRequest" name="getErrorsRequest">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="downloadMessage">
        <wsdl:part element="tns:downloadMessageRequest" name="downloadMessageRequest">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="DownloadMessageFault">
        <wsdl:part element="tns:FaultDetail" name="DownloadMessageFault">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="downloadMessageResponse">
        <wsdl:part element="tns:downloadMessageResponse" name="downloadMessageResponse">
        </wsdl:part>
        <wsdl:part element="ns1:Messaging" name="ebMSHeaderInfo">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="listPendingMessagesResponse">
        <wsdl:part element="tns:listPendingMessagesResponse" name="listPendingMessagesResponse">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getMessageStatusResponse">
        <wsdl:part element="tns:getMessageStatusResponse" name="getMessageStatusResponse">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="listPendingMessages">
        <wsdl:part element="tns:listPendingMessagesRequest" name="listPendingMessagesRequest">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getMessageStatus">
        <wsdl:part element="tns:getStatusRequest" name="getStatusRequest">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendMessageResponse">
        <wsdl:part element="tns:sendResponse" name="sendResponse">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendMessage">
        <wsdl:part element="tns:sendRequest" name="sendRequest">
        </wsdl:part>
        <wsdl:part element="ns1:Messaging" name="ebMSHeaderInfo">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="SendMessageFault">
        <wsdl:part element="tns:FaultDetail" name="SendMessageFault">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getMessageErrorsResponse">
        <wsdl:part element="tns:getMessageErrorsResponse" name="getMessageErrorsResponse">
        </wsdl:part>
    </wsdl:message>
    <wsdl:portType name="BackendInterface">
        <wsdl:operation name="sendMessage">
            <wsdl:input message="tns:sendMessage" name="sendMessage">
            </wsdl:input>
            <wsdl:output message="tns:sendMessageResponse" name="sendMessageResponse">
            </wsdl:output>
            <wsdl:fault message="tns:SendMessageFault" name="SendMessageFault">
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getMessageStatus">
            <wsdl:input message="tns:getMessageStatus" name="getMessageStatus">
            </wsdl:input>
            <wsdl:output message="tns:getMessageStatusResponse" name="getMessageStatusResponse">
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="listPendingMessages">
            <wsdl:input message="tns:listPendingMessages" name="listPendingMessages">
            </wsdl:input>
            <wsdl:output message="tns:listPendingMessagesResponse" name="listPendingMessagesResponse">
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getMessageErrors">
            <wsdl:input message="tns:getMessageErrors" name="getMessageErrors">
            </wsdl:input>
            <wsdl:output message="tns:getMessageErrorsResponse" name="getMessageErrorsResponse">
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="downloadMessage"
                        parameterOrder="downloadMessageRequest downloadMessageResponse ebMSHeaderInfo">
            <wsdl:input message="tns:downloadMessage" name="downloadMessage">
            </wsdl:input>
            <wsdl:output message="tns:downloadMessageResponse" name="downloadMessageResponse">
            </wsdl:output>
            <wsdl:fault message="tns:DownloadMessageFault" name="DownloadMessageFault">
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:portType>
    <wsdl:binding name="BackendService_1_1SoapBinding" type="tns:BackendInterface">
        <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="sendMessage">
            <soap12:operation soapAction="" style="document"/>
            <wsdl:input name="sendMessage">
                <soap12:header message="tns:sendMessage" part="ebMSHeaderInfo" use="literal">
                </soap12:header>
                <soap12:body parts="sendRequest" use="literal"/>
            </wsdl:input>
            <wsdl:output name="sendMessageResponse">
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="SendMessageFault">
                <soap12:fault name="SendMessageFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getMessageStatus">
            <soap12:operation soapAction="" style="document"/>
            <wsdl:input name="getMessageStatus">
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="getMessageStatusResponse">
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getMessageErrors">
            <soap12:operation soapAction="" style="document"/>
            <wsdl:input name="getMessageErrors">
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="getMessageErrorsResponse">
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="listPendingMessages">
            <soap12:operation soapAction="" style="document"/>
            <wsdl:input name="listPendingMessages">
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="listPendingMessagesResponse">
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="downloadMessage">
            <soap12:operation soapAction="" style="document"/>
            <wsdl:input name="downloadMessage">
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="downloadMessageResponse">
                <soap12:header message="tns:downloadMessageResponse" part="ebMSHeaderInfo" use="literal">
                </soap12:header>
                <soap12:body parts="downloadMessageResponse" use="literal"/>
            </wsdl:output>
            <wsdl:fault name="DownloadMessageFault">
                <soap12:fault name="DownloadMessageFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:service name="BackendService_1_1">
        <wsdl:port binding="tns:BackendService_1_1SoapBinding" name="BACKEND_PORT">
            <soap12:address location="http://localhost:8080/domibus/services/backend"/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>